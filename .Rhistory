info()
main()
main()
qplot(displ,hwy, data = mpg, geom = c("point", "smooth", facets = .~drv))
qplot(displ,hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv))
qplot(displ,hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
g <-ggplot(mpg, hwy~displ)
g <-ggplot(mpg, aes(hwy~displ))
g <-ggplot(mpg, aes(displ,hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+geom_smooth(method = "lm") +facet_grid(.~drv)
g+geom_point()+geom_smooth(method = "lm") +facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color = "pink", size =4, alpha(=.5))
g+geom_point(color = "pink", size =4, alpha=.5)
g + geom_point(size =4, alpha = 0.5, col = drv)
g + geom_point(size =4, alpha = 0.5, aes(col = drv))
g + geom_point(aes(color = drv), size = 4, alpha = 1/2)
g + geom_point(aes(color = drv), size = 4, alpha = 1/2) + labs(title = "Swirl Rules")+
labs(x= "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules")+
labs(x= "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules")+
labs(x= "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!")+
labs(x= "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv), size = 2, alpha = 1/2) + geom_smooth(size =4, linetype =3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv), size = 2, alpha = 1/2) + geom_smooth(size =4, linetype =3, method = "lm")
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
info()
bye()
library(swirl)
swirl()
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() + geom_smooth(method = "lm")+ facet_grid(.~drv)
g + geom_point() + geom_smooth(method = "lm")+ facet_grid(.~drv)+ggtitle ("Swril Rules!")
g + geom_point() + geom_smooth(method = "lm")+ facet_grid(.~drv)+ggtitle("Swril Rules!")
g + geom_point() + geom_smooth(method = "lm")+ facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+ geom_point(col= "pink", size = 4, alph .5)
g+ geom_point(col= "pink", size = 4, alph =.5)
g+ geom_point(col= "pink", size = 4, alph = 0.5)
g+ geom_point(col= "pink", size = 4, alph = 1/2)
g+ geom_point(col= "pink", size = 4, alpha = 1/2)
g+ geom_point(col= "pink", size = 4, alpha =1/2)
g+ geom_point(color= "pink", size = 4, alpha =1/2)
g+ geom_point( size = 4, alpha =1/2, aes(color = .~drv))
g+ geom_point( size = 4, alpha =1/2, aes(color = drv))
g+ geom_point( size = 4, alpha =1/2, aes(color = drv)) +labs(title = "Swirl Rules!") +labs(x = "Displacement", y = "Hwy Mileage")
g+ geom_point(aes(color = drv)) +labs(title = "Swirl Rules!") +labs(x = "Displacement", y = "Hwy Mileage")
g+ geom_point(aes(color = drv), size =2, alpha= .5) +geom_smooth(size=4, linetype=3, method = "lm", se = FALSE)
g + geom_point(color= drv) + theme_bw(base_family = "Times")
g + geom_point(aes(color= drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type= "l", ylim = c(-3,3))
g <- ggplot(x= myx, y= myy, data = testdat)
g <- ggplot(aes(x= myx, y= myy), data = testdat)
g+geom_point()
g+geom_line()
g+geom_line(ylim = c(-3,3))
g+geom_line()+ ylim(-3,3)
g+geom_line()+ ylim(-3,3)+ coord_cartesian(ylim = c(-3,3))
g+geom_line()+ coord_cartesian(ylim = c(-3,3))
g+geom_line()+ coord_cartesian(ylim = c(-3,3))
?coord_cartesian
g <- ggplot(x= displ, y= hwy, color= factor)
g <- ggplot(aes(x= displ, y= hwy, color= factor)
)
g <- ggplot(aes(x= displ, y= hwy, color= factor), data = dataset)
g <- ggplot(aes(x= displ, y= hwy, color= factor), data = mpg)
g <- ggplot(aes(x= displ, y= hwy, color= factor(year)), data = mpg)
g+ geom_point()
g+ geom_point()+facet_grid(drv~cyl, margins = TRUE)
g+ geom_point()+facet_grid(drv~cyl, margins = TRUE)+ smooth(method = "l", se = FALSE, color= "black", size =2)
g+ geom_point()+facet_grid(drv~cyl, margins = TRUE)+ smooth(method = "lm", se = FALSE, color= "black", size =2)
g+ geom_point()+facet_grid(drv~cyl, margins = TRUE)+ geom_smooth(method = "lm", se = FALSE, color= "black", size =2)
g+ geom_point()+facet_grid(drv~cyl, margins = TRUE)+ geom_smooth(method = "lm", size =2, se = FALSE, color= "black")
g+ geom_point()+facet_grid(drv~cyl, margins = TRUE)+ geom_smooth(method = "lm", size =2, se = FALSE, color= "black")+ labs(x= "Displacement", y = "Highway Mile age") + labs(title= "Swirl Rules!")
g+ geom_point()+facet_grid(drv~cyl, margins = TRUE)+ geom_smooth(method = "lm", size =2, se = FALSE, color= "black")+ labs(x= "Displacement", y = "Highway Mile age",title= "Swirl Rules!")
g+ geom_point()+facet_grid(drv~cyl, margins = TRUE)+ geom_smooth(method = "lm", size =2, se = FALSE, color= "black")+ labs(x= "Displacement", y = "Highway Mile age",title= "Swirl Rules!")
g + geom_point() +
| facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="Highway
| Mileage",title="Swirl Rules!")
g + geom_point() +
facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="Highway Mileage",title="Swirl Rules!")
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill=cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data = dataset)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, geom_smooth(method = "lm"))
qplot(carat, price, data = diamonds, color = cut)+ geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut)+ geom_smooth(method = "lm")+ facet_grid(.~cut)
qplot(carat, price, data = diamonds, color = cut,facets =.~cut)+ geom_smooth(method = "lm")
g <- ggplot(diamonds, ase(depth, price))
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoint <- quantile(diamonds$carat, seq(0,1, len=4), na.rm = TRUE)
cutpoint <- quantile(diamonds$carat, seq(0,1, length=4), na.rm = TRUE)
cutpoints <- quantile(diamonds$carat, seq(0,1,length=4), na.rm = TRUE)
cutpoint
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(data = diamonds, aes(depth,price))
g <- ggplot(data = diamonds, aes(depth,price))+ geom_point(alpha = 1/3,)+ facet_grid(cut ~car2)
g <- ggplot(data = diamonds, aes(depth,price))+ geom_point(alpha = 1/3)+ facet_grid(cut ~car2)
g+geom_point(alpha = 1/3)+ facet_grid(cut ~car2)
diamonds[myd,]
g+geom_point(alpha = 1/3)+ facet_grid(cut ~car2) + geom_smooth(method = "lm", size=3, color= "pink")
ggplot(diamonds,aes(carat, argument)) + geom_boxplot() + facet_grid(.~cut)
ggplot(diamonds,aes(carat, argument) + geom_boxplot() + facet_grid(.~cut))
ggplot(diamonds,aes(carat, price) + geom_boxplot() + facet_grid(.~cut))
ggplot(diamonds,aes(carat, price)) + geom_boxplot() + facet_grid(.~cut)
library(nlme)
lbirary(lattice)
install.packages("lattice")
install.packages("lattice")
library(lattice)
xyplot(weight~Time|Diet, Bodyweight)
xyplot(weight~Time|Diet, BodyWeight)
str(body)
str(bodyWeight)
library(nlme)
head(BodyWeight)
xyplot(weight~Time|Diet, BodyWeight)
library(swilr)
library(swirl)
swirl()
0
infor
info()
main()
swirl(())
swirl(
)
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h = 1.5, col= "blue")
abline(h=0.4, col= "red")
5
abline(h=0.0.5)
abline(h=0.5)
abline(h=0.05)
12
abline(h=0.05, col= "green")
dist(dFsm)
hc
heatmap(dataMatrix, col= cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx, cy, col= c("red", "orange", "purple"), pch =3 +, cex=2, lwd =2)
points(cx, cy, col= c("red", "orange", "purple"), pch =3, cex=2, lwd =2)
mdist
mid(x,y, cx, cy)
mdist(x,y, cx, cy)
apply(distTmp, 2, which.min)
points(x, y, pch = 19, cex=2, col= colsl[newClust])
points(x, y, pch = 19, cex=2, col= cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col= cols1, pch = 8, cex =2, lwd =2)
mdist(x,y, newCx, newCy)
apply(distTmp2, 2, 2hich.min)
apply(distTmp2, 2, which.min)
points(x, y, pch= 19, cex= 2, col= cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
plot(finalCx, finalCy, col= cols1, pch =9, cex=2, lwd=2)
points(finalCx, finalCy, col= cols1, pch =9, cex=2, lwd=2)
kmeans(dataFrame, centers=3)
kmObj$iter
plot(x, y, col= kmObj$cluster, pch =19, cex=2)
points(kmObj$centers, col= c("black", "red", "green", pch = 3, cex = 3, lwd= 3)
)
points(kmObj$centers, col= c("black", "red", "green"), pch = 3, cex = 3, lwd= 3)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex =2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex =2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex =2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[,2]
svd2$v[,1:2]
svd2$d
dim(faceData)
svd1$d
svd1$d[1]
a1 <- svd1*u[,1]* svd1$d[1] %*% t(svd$v[,1])
a1 <- svd1$u[,1]* svd1$d[1] %*% t(svd$v[,1])
a1 <- svd1$u[,1]* svd1$d[1] %*% t(svd1$v[,1])
a1 <- (svd1$u[,1]* svd1$d[1]) %*% t(svd1$v[,1])
myImage
myImage(a1)
a2 <- (svd1$u[,1:2]* svd1$d[1:2]) %*% t(svd1$v[,1:2])
diag(svd1$d[1:2]))
diag(svd1$d[1:2])
a2 <- (svd1$u[,1:2]* diag(svd1$d[1:2])) %*% t(svd1$v[,1:2])
a2 <- (svd1$u[,1:2] %*% diag(svd1$d[1:2])) %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
swirl
library(swirl)
swirl()
infor()
info()
main()
dim(ssd)
names(ssd)[562:563]
names(ssd[562:563])
table(ssd$subject)
sum(ssd$subject)
sum(table(ssd$subject))
ssd$activity
table(ssd$activity)
sub1 <- subset(ssd, subject = 1)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1, 1:12)
names(sub1)[1:12]
myedit("showXY.R")
myedit("showXY.R")
showme(1:6
)
showme(1:6
)
showMe(1:6)
dist(x[,1:3])
mdist <- dist(sub[,1:3])
mdist <- dist(sub1[,1:3])
hclusting <- hclust(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[, 10:12])
hculstering <- hclust(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1, -c(562,563)))
svd1 <- svd(scale(sub1[, -c(562,563)])
)
dim(svd1$u)
maxCon <- which.max(svd1$v)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1$[,10:12]+maxCon)
mdist <- dist(sub1$V[,10:12]+maxCon)
mdist <- dist(sub1$V[,C(10:12, maxCon)])
mdist <- dist(sub1[,C(10:12, maxCon)])
mdist <- dist(sub1[,c(10:12, maxCon)])
hclustering <- hclust(mdist)
myplclust(hculstering, col = unclass(sub1$activity))
myplclust(hculstering, lab.col = unclass(sub1$activity))
myplclust(hculstering, lab.col = unclass(sub1$activity))
myplclust(hclustering, lab.col = unclass(sub1$activity))
sub1[maxCon]
names(sub1[maxCon])
kClust <- kmeans(sub[, -(562:563)],6)
kClust <- kmeans(sub[, -562:563],6)
kClust <- kmeans(sub1[, -562:563],6)
kClust <- kmeans(sub1[, -(562:563)],6)
kClust <- kmeans(sub1[, -c(562,563)],6)
table( kClust$cluster, sub1$activity)
kmeans(sub1[, -c(562,563)], 6, nstart = 100)
KClust <- kmeans(sub1[, -c(562,563)], 6, nstart = 100)
KClust <- kmeans(sub1[, -c(562,563)], centers = 6, nstart = 100)
kClust <- kmeans(sub1[, -c(562,563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust==29)
laying <- which(kClust$size==29)
plot(kClust[laying, 1:12], pch = 19, ylab = "Laying Cluster"
)
plot(kClust[laying, 1:12], pch = 19, ylab = "Laying Cluster")
plot(kClust$centers[laying, 1:12], pch = 19, ylab = "Laying Cluster")
names(sub1)[1:3]
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown, 1:12], pch =19, ylab= "Walkdown Cluster")
1304287*28
a<- 1204287*28
a
36520036/2^20
library(swirl)
swirl()
dim(pm0)
head(pm0)
cnames
cname <- strsplit(cnames, sep= "|", fixed = TRUE)
cname <- strsplit(cnames,  |, fixed = TRUE)
cname <- strsplit(cnames,  "|", fixed = TRUE)
cnames <- strsplit(cnames, sep = "|", fixed = TRUE)
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames
wcol
names(pm0 )<- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(X0)
summary(x0)
summary(x0, na.rm = TRUE)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0), log10(x1))
negative <- x1 <0
sum(negative,na.rm = TRUE)
mean(negative,na.rm = true)
mean(negative,na.rm = TRUE)
datas <- pm1$Date
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), %Y%m%d)
dates <- as.Date(as.character(dates),%Y%m%d)
dates <- as.Date(as.character(dates),"%Y%m%d")
head(dates)
hist(dates[negative],"month")
str(site0)
both <- intersect(site0, site1)
both
hea(pm0)
head(pm0)
cnt0 <- subse(pm0, State.Code ==36 & country.site %in% both)
cnt0 <- subset(pm0, State.Code ==36 & country.site %in% both)
cnt0 <- subset(pm0, State.Code ==36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code ==36 & county.site %in% both)
sapply(split(cnt0,cnt0$county.site), nrow)
sapply(split(cnt1,cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code ==63 & Site.ID ==2008)
pm1sub <- subset(cnt1, County.Code ==63 & Site.ID ==2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow =  c(1,2), mar= c(4 ,4 , 2, 1))
plot (dates0, x0sub, pch = 20)
abline(h = mean(x0sub), lwd = 2, na.rm= TRUE)
abline(h = mean(x0sub, na.rm = TRUE), lwd = 2)
abline(h = median(x0sub, na.rm = TRUE), lwd = 2)
plot (dates1, x1sub, pch = 20)
abline(h = median(x1sub, na.rm = TRUE), lwd = 2)
rng <- rang(x0sub, x1sub, na.rm = TRUE)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 < with(pm0, tapply(Sample.Vale, State.Code, mean, na.rm = TRUE))
mn0 <- with(pm0, tapply(Sample.Vale, State.Code, mean, na.rm = TRUE))
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state = names(mn0), mean= (mn0))
d0 <- data.frame(state = names(mn0), mean= mn0)
d1 <- data.frame(state = names(mn1), mean= mn1)
mrg <- merge(d0, d1, by = "state")
dim(mrg)
head(mrg)
with(mrg, plot(req(1,52),mrg[,2]), xlim = c(.5, 2.5))
with(mrg, plot(rep(1,52),mrg[,2]), xlim = c(.5, 2.5))
with(mrg, plot(rep(1,52),mrg[,2], xlim = c(.5, 2.5)))
with(mrg, plot(rep(2,52),mrg[,3], xlim = c(.5, 2.5)))
with(mrg, plot(rep(1,52),mrg[,2], xlim = c(.5, 2.5)))
with(mrg, point(rep(2,52), mrg[,3]))
with(mrg, points(rep(2,52), mrg[,3]))
segments(rep(1,52),mrg[,2],req(2,52),mrg[,3])
segments(rep(1,52),mrg[,2],rep(2,52),mrg[,3])
mrg[mrg$mean.x< mrg$mean.y]
mrg[mrg$mean.x< mrg$mean.y,]
sys.time()
?sys.time
format(Sys.time(), "%a %b %d %X %Y")
sys.date()
Sys.time()
Sys.Date()
stepsByDay <- aggregate(newData$steps ~ newData$interval + newData$day, newData, mean)
data <- read.csv("activity.csv")
completes <- data[complete.cases(data)==TRUE,]
Splitinterval <- split(completes, completes$interval, drop = TRUE)
intervalavg <- sapply(Splitinterval, function(x) mean(x$steps))
count <- 0
for(i in 1:nrow(data)){
if(is.na(data[i,1])){
data[i,1] <- intervalavg[as.character(data[i,3])]
count <- count +1
}
}
data$ww <- as.Date(as.character(data$date),format = "%Y-%m-%d")
data$wd <-weekdays(data$ww)
for (i in 1:nrow(data)){
if (data[i,5] %in% c("Monday","Tuesday","Wednesday","Thursday","Friday")){
data[i,6] <- "Weekday"
}
else {
data[i,6] <- "Weekend"
}
}
as.factor(data$V6)
splitwk <-split(data, data$V6)
splitwkday <- as.data.frame(splitwk[1])
splitwkend <- as.data.frame(splitwk[2])
splitinter1 <- split(splitwkday,splitwkday$Weekday.interval)
splitinter2 <- split(splitwkend,splitwkend$Weekend.interval)
splitinter1avg <- sapply(splitinter1, function(x) mean(as.numeric(x$Weekday.steps)))
splitinter2avg <- sapply(splitinter2, function(x) mean(as.numeric(x$Weekend.steps)))
panel.smooth(splitinter1avg,unique(splitwkday$Weekday.interval),col = "red",type ="l")
panel.smooth(splitinter2avg,unique(splitwkday$Weekend.interval), col = "blue", type= "l")
newData <- data
names(newData)[6] <- "day"
setwd("./RepData_PeerAssessment1/activity/")
data <- read.csv("activity.csv")
completes <- data[complete.cases(data)==TRUE,]
Splitinterval <- split(completes, completes$interval, drop = TRUE)
intervalavg <- sapply(Splitinterval, function(x) mean(x$steps))
count <- 0
for(i in 1:nrow(data)){
if(is.na(data[i,1])){
data[i,1] <- intervalavg[as.character(data[i,3])]
count <- count +1
}
}
data$ww <- as.Date(as.character(data$date),format = "%Y-%m-%d")
data$wd <-weekdays(data$ww)
for (i in 1:nrow(data)){
if (data[i,5] %in% c("Monday","Tuesday","Wednesday","Thursday","Friday")){
data[i,6] <- "Weekday"
}
else {
data[i,6] <- "Weekend"
}
}
as.factor(data$V6)
splitwk <-split(data, data$V6)
splitwkday <- as.data.frame(splitwk[1])
splitwkend <- as.data.frame(splitwk[2])
splitinter1 <- split(splitwkday,splitwkday$Weekday.interval)
splitinter2 <- split(splitwkend,splitwkend$Weekend.interval)
splitinter1avg <- sapply(splitinter1, function(x) mean(as.numeric(x$Weekday.steps)))
splitinter2avg <- sapply(splitinter2, function(x) mean(as.numeric(x$Weekend.steps)))
panel.smooth(splitinter1avg,unique(splitwkday$Weekday.interval),col = "red",type ="l")
panel.smooth(splitinter2avg,unique(splitwkday$Weekend.interval), col = "blue", type= "l")
newData <- data
names(newData)[6] <- "day"
stepsByDay <- aggregate(newData$steps ~ newData$interval + newData$day, newData, mean)
names(stepsByDay) <- c("interval", "day", "steps")
par(mfrow=c(1,1))
with(stepsByDay, plot(steps ~ interval, type="n", main="Weekday vs. Weekend Avg."))
with(stepsByDay[stepsByDay$day  "weekday",], lines(steps ~ interval, type="l", col="chocolate"))
with(stepsByDay[stepsByDay$day == "weekday",], lines(steps ~ interval, type="l", col="chocolate"))
head(stepsByDay)
head(stepsByDay[stepsByDay$day == "weekday",])
head(stepsByDay[stepsByDay$day == "Weekday",])
with(stepsByDay[stepsByDay$day == "Weekday",], lines(steps ~ interval, type="l", col="chocolate"))
with(stepsByDay[stepsByDay$day == "Weekend",], lines(steps ~ interval, type="l", col="16" ))
legend("topright", lty=c(1,1), col = c("chocolate", "16"), legend = c("weekday", "weekend"), seg.len=3)
plot(splitinter1avg)
class(splitiner1avg)
class(splitinter1avg)
dim(splitinter1avg)
data.frame(splitinter1avg)
dim(splitinter1avg)
dim(splitinter1avg)
data.frame(splitinter1avg)
head(splitinter1avg)
class(splitinter1avg)
as.data.frame(splitinter1avg)
dim(splitinter1avg)
nrow(splitinter1avg)
splitinter1avg
nrow(splitinter1avg)
as.data.frame(splitinter1avg)
as.vector(splitinter1avg)
head(splitinter1avg)
nrow(splitinter1avg)
class(splitiner1avg)
A <- as.data.frame(splitinter1avg)
dim(A)
names(A)
